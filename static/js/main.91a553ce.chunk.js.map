{"version":3,"sources":["components/NavBar.js","components/SearchBar.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","SearchBar","searchField","searchChange","type","name","onChange","TableRow","imgURL","phone","email","dob","src","alt","Table","employees","sortData","formatDate","date","newDate","Date","Intl","DateTimeFormat","format","scope","onClick","map","empl","i","vv","picture","medium","first","last","App","onSearchChange","event","setState","target","value","state","direction","bind","fetch","mode","then","res","json","empls","results","keyOne","sorted","newDirection","data","this","currentDirection","sort","a","b","fullNameA","fullNameB","console","log","filteredEmployees","filter","phoneMatch","replace","includes","nameMatch","toLowerCase","emailMatch","birthdayMatch","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91a553ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Navbar() {\r\n   return (\r\n       <div>\r\n            <nav className=\"navbar navbar-light bg-info text-center\">\r\n            <h1 className=\"navbar-brand\">Employee Directory</h1>\r\n                <span className=\"navbar-text\">\r\n                    \r\n                    <p className=\"text-center\"> Search or filter employees by name, phone, email address, or birth year. </p>\r\n                </span>\r\n            </nav>\r\n       </div>\r\n   )\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction SearchBar({searchField, searchChange}) {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label> Employee Search: \r\n                    <input \r\n                    className=\"form-control\" \r\n                    type=\"search\" \r\n                    name=\"search\" \r\n                    onChange={searchChange} \r\n                    />\r\n                </label>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\nexport default SearchBar;","import React from 'react';\r\n\r\nfunction TableRow({imgURL, name, phone, email, dob}) {\r\n    return (\r\n            <tr>\r\n                <td><img src={imgURL} alt={name}/></td>\r\n                <td>{name}</td>\r\n                <td>{phone}</td>\r\n                <td>{email}</td>\r\n                <td>{dob}</td>\r\n            </tr>\r\n    )\r\n}\r\nexport default TableRow;","import React from 'react';\r\nimport TableRow from './TableRow';\r\n\r\nfunction Table ({ employees, sortData }) {\r\n\r\n    // converts date from (ex: 1957-02-11T11:20:36.868Z) to MM-DD-YYYY format\r\n    const formatDate = (date) => {\r\n        let newDate = new Date(date);\r\n        let filtered = Intl.DateTimeFormat(\"en-US\").format(newDate);\r\n        return filtered;\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <table className=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" ><button type=\"button\" className=\"btn btn-info\">Image</button></th>\r\n                    <th scope=\"col\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-info\" \r\n                            onClick={() => {sortData('name', 'first')}}>\r\n                                Name \r\n                        </button>\r\n                    </th>\r\n                    <th scope=\"col\">\r\n                        <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-info\" \r\n                        onClick={() => {sortData('phone')}}>\r\n                            Phone\r\n                        </button>\r\n                    </th>\r\n                    <th scope=\"col\" > \r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-info\" \r\n                            onClick={() => {sortData('email')}}>\r\n                                Email\r\n                        </button>\r\n                    </th>\r\n                    <th scope=\"col\" >\r\n                        <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-info\"\r\n                        onClick={() => {sortData('dob', 'date')}}>\r\n                            DOB\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {/* maps all employees into their own Table Row */}\r\n                {employees.map((empl, i) => {\r\n                    return (\r\n                        <TableRow vv\r\n                        key={i}\r\n                        // picture options are large, medium, and thumbnail\r\n                        imgURL={employees[i].picture.medium}\r\n                        name={employees[i].name.first + ' ' + employees[i].name.last} \r\n                        phone={employees[i].phone}\r\n                        email={employees[i].email}\r\n                        dob={formatDate(employees[i].dob.date)}\r\n                    />\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/NavBar\";\nimport SearchBar from './components/SearchBar';\nimport Table from './components/Table';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      employees: [],\n      searchField: '',\n      direction: 'desc'\n    }\n\n    this.sortData = this.sortData.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=20&nat=us', {mode: 'cors'})\n    .then(res => res.json())\n    .then(empls => {\n      this.setState({employees: empls.results})\n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  sortData(keyOne) {\n    let data = [...this.state.employees]; \n    let sorted = [];\n    let newDirection;\n    let currentDirection = this.state.direction;\n    \n    \n    \n      sorted = data.sort((a, b) => {\n        // only name and dob have second \"keys\"\n        if (keyOne === 'name' || keyOne === \"dob\") {\n          let fullNameA = a.name.first + ' ' + a.name.last;\n          let fullNameB = b.name.first + ' ' + b.name.last;\n\n        if (fullNameA > fullNameB && currentDirection === 'desc' ) {\n          newDirection = 'asc';\n          return 1;\n        } else if (fullNameA < fullNameB && currentDirection === 'asc') {\n          console.log(\"i've descended\");\n          newDirection = 'desc';\n           return -1;\n        } else {\n          newDirection = currentDirection === 'desc' ? 'asc' : 'desc'\n          return -1;\n        }\n        \n      } else {\n\n        if (a[keyOne] < b[keyOne && currentDirection === 'asc' ]){\n          return -1;\n        } else if (a[keyOne] > b[keyOne] && currentDirection === 'desc' ) {\n          return +1;\n        } else {\n          newDirection = currentDirection === 'desc' ? 'asc' : 'desc'\n          return -1;\n        }\n\n        \n      }\n      \n      \n    });\n    \n    // After conditionals, return the sorted value\n    this.setState({\n      employees: sorted,\n      direction: newDirection\n    })\n  }\n\n\n\n  \n  render() {\n    const { employees, searchField } = this.state;\n\n    /* can search employees via Search Bar - results in the Table will adjust to match */\n    const filteredEmployees = employees.filter(empl => {\n\n      // remove special characters and spaces from phone empl.phone (ex: (320)-555-5555 turns to 3205555555)\n      let strippedPhone = empl.phone.replace(/[^\\d]/g, \"\"); \n      let phoneMatch = strippedPhone.includes(searchField);\n\n      // concatenate first and last name, then check for match with searchField\n      let fullName = empl.name.first + ' ' + empl.name.last;\n      let nameMatch = fullName.toLowerCase().includes(searchField.toLowerCase());\n      \n      \n      let emailMatch = empl.email.includes(searchField);\n      let birthdayMatch = empl.dob.date.includes(searchField);\n\n      // conditional check and return\n      if (nameMatch) {\n        return nameMatch;\n      } else if (phoneMatch) {\n        return phoneMatch;\n      } else if (emailMatch) {\n        return emailMatch;\n      } else if (birthdayMatch) {\n        return birthdayMatch;\n      } \n    });\n\n    return !employees.length ?\n      <h3>Loading... </h3> : \n      (\n        <div className=\"App\">\n          <div>\n            <Navbar />\n          </div>\n          <div>\n            <SearchBar searchChange={this.onSearchChange}/>\n          </div>  \n          <div>\n            <Table employees={ filteredEmployees } sortData={ this.sortData }/>\n          </div> \n        </div>\n      );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// bootstrap\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}